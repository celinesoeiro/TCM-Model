import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
sns.set_theme()

def homogeneous_poisson(rate, tmax, bin_size): 
    nbins = np.floor(tmax/bin_size).astype(int) 
    prob_of_spike = rate * bin_size 
    spikes = np.random.rand(nbins) < prob_of_spike 
    return spikes * 1

def izhikevich_dvdt(v, u, I):
    return 0.04*v**2 + 5*v + 140 - u + I

def izhikevich_dudt(v, u, a, b):
    return a*(b*v - u)

def synapse_utilization(u, tau_f, U, AP, dt):
    return dt*(-u/tau_f) + U*(1 - u)*AP

def synapse_recovery(R, tau_d, u_next, AP, dt, R_prev):
    return dt*((1/tau_d)*(1 - R)) - u_next*R_prev*AP

def synapse_current(I, tau_s, A, R_prev, u_next, AP, dt):
    return dt*(-I/tau_s) + A*R_prev*u_next*AP

def tm_syn_excit_dep(sim_steps, vr, vp, a, b, c, d, spikes, time, W, dt, neuron_type):
    t_f = 17
    t_d = 671
    U = 0.5
    A = 1
    t_s = 3         
    
    v = np.zeros((1, sim_steps)) 
    v[0][0] = vr
    u = np.zeros((1, sim_steps))
    u[0][0] = vr*b

    R_syn = np.zeros((1, sim_steps)) # R for Excitatory Depression
    u_syn = np.zeros((1, sim_steps)) # u for Excitatory Depression
    I_syn = np.zeros((1, sim_steps)) # I for Excitatory Depression
    R_syn[0][0] = 1

    PSC = np.zeros((1, sim_steps))
    AP_neuron = np.zeros((1, sim_steps))

    for t in time:
        AP_syn = spikes[t]
        
        # Synapse var - Excitatory - Depression
        syn_u_aux = 1*u_syn[0][t - 1]
        syn_R_aux = 1*R_syn[0][t - 1]
        syn_I_aux = 1*I_syn[0][t - 1]
        syn_R_prev = 1*R_syn[0][t - 1]
            
        # Synapse - Excitatory - Depression
        syn_du = synapse_utilization(u = syn_u_aux, tau_f = t_f,  U = U, AP = AP_syn, dt = dt)
        u_syn[0][t] = syn_u_aux + syn_du
        
        syn_dR = synapse_recovery(R = syn_R_aux, tau_d = t_d, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt, R_prev=syn_R_prev)
        R_syn[0][t] = syn_R_aux + syn_dR
        
        syn_dI = synapse_current(I = syn_I_aux, tau_s = t_s, A = A, R_prev = syn_R_prev, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt)
        I_syn[0][t] = syn_I_aux + syn_dI
        PSC[0][t] = 1*I_syn[0][t]
        
        v_aux = 1*v[0][t - 1]
        u_aux = 1*u[0][t - 1]
        
        # Neuron - FS - Inhibitory
        if (v_aux >= vp):
            AP_neuron[0][t] = t - 1
            v_aux = v[0][t]
            v[0][t] = c
            u[0][t] = u_aux + d
        else:
            dv = izhikevich_dvdt(v = v_aux, u = u_aux, I = W*PSC[0][t - 1])
            du = izhikevich_dudt(v = v_aux, u = u_aux, a = a, b = b)

            v[0][t] = v_aux + dt*dv
            u[0][t] = u_aux + dt*du

    v_value = []
    for ap in AP_neuron[0]:
        if (ap > 1):
            v_value.append(v[0][int(ap) - 1])
            
    fig, (ax1,ax2,ax3) = plt.subplots(3,1,figsize=(15, 15), constrained_layout=True, sharex=True)
    
    fig.suptitle(f'{neuron_type}', fontsize=30)
    ax1.plot(spikes)
    ax2.plot(PSC[0])
    ax3.plot(v[0])

    ax1.set_title('Spike train generated by Poisson', fontsize=20)
    ax2.set_title('PSC - Excitatory dominated by depression', fontsize=20)
    ax3.set_title('Potential', fontsize=20)
    plt.show()
        
def tm_syn_excit_fac(sim_steps, vr, vp, a, b, c, d, time, dt, spikes, W, neuron_type):
    t_f = 670
    t_d = 138
    t_s = 3
    U = 0.5
    A = 1
    
    v = np.zeros((1, sim_steps)) 
    v[0][0] = vr
    u = np.zeros((1, sim_steps)) 
    u[0][0] = vr*b

    R_syn = np.zeros((1, sim_steps)) # R for Excitatory Facilitation
    u_syn = np.zeros((1, sim_steps)) # u for Excitatory Facilitation
    I_syn = np.zeros((1, sim_steps)) # I for Excitatory Facilitation
    R_syn[0][0] = 1

    PSC = np.zeros((1, sim_steps))
    AP_neuron = np.zeros((1, sim_steps))

    for t in time:
        AP_syn = spikes[t - 1]

        # Synapse var - Excitatory - Facilitation
        syn_u_aux = 1*u_syn[0][t - 1]
        syn_R_aux = 1*R_syn[0][t - 1]
        syn_I_aux = 1*I_syn[0][t - 1]
        syn_R_prev = 1*R_syn[0][t - 1]
            
        syn_du = synapse_utilization(u = syn_u_aux, tau_f = t_f, U = U, AP = AP_syn, dt = dt)
        u_syn[0][t] = syn_u_aux + syn_du
        
        syn_dR = synapse_recovery(R = syn_R_aux, tau_d = t_d, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt, R_prev=syn_R_prev)
        R_syn[0][t] = syn_R_aux + syn_dR
        
        syn_dI = synapse_current(I = syn_I_aux, tau_s = t_s, A = A, R_prev = syn_R_prev, u_next = 1*u_syn[0][t], AP = AP_syn,dt = dt)
        I_syn[0][t] = syn_I_aux + syn_dI
        PSC[0][t] = 1*I_syn[0][t]
        
        v_aux = 1*v[0][t - 1]
        u_aux = 1*u[0][t - 1]
        
        # Neuron - RS - Excitatory
        if (v_aux >= vp):
            AP_neuron[0][t] = t - 1
            v_aux = v[0][t]
            v[0][t] = c
            u[0][t] = u_aux + d
        else:
            dv = izhikevich_dvdt(v = v_aux, u = u_aux, I = W*PSC[0][t - 1])
            du = izhikevich_dudt(v = v_aux, u = u_aux, a = a, b = b)

            v[0][t] = v_aux + dt*dv
            u[0][t] = u_aux + dt*du
        
        v_aux = 1*v[0][t - 1]
        u_aux = 1*u[0][t - 1]
       
    v_value = []
    for ap in AP_neuron[0]:
        if (ap > 1):
            print(ap)
            v_value.append(v[0][int(ap)])

    fig, (ax1,ax2,ax3) = plt.subplots(3,1,figsize=(15, 15), constrained_layout=True, sharex=True)
    
    fig.suptitle(f'{neuron_type}', fontsize=30)
    ax1.plot(spikes)
    ax2.plot(PSC[0])
    ax3.plot(v[0])

    ax1.set_title('Spike train generated by Poisson', fontsize=20)
    ax2.set_title('PSC - Excitatory dominated by facilitation', fontsize=20)
    ax3.set_title('Potential', fontsize=20)
    plt.show()

def tm_syn_inib_dep(sim_steps, dt, time, a, b, c, d, vp, vr, spikes, W, neuron_type):
    t_f = 21
    t_d = 706
    U = 0.5
    A = 1
    t_s = 11
    
    v = np.zeros((1, sim_steps)) 
    v[0][0] = vr
    u = np.zeros((1, sim_steps))
    u[0][0] = vr*b

    R_syn = np.zeros((1, sim_steps)) # R for Inhibitory Depression
    u_syn = np.zeros((1, sim_steps)) # u for Inhibitory Depression
    I_syn = np.zeros((1, sim_steps)) # I for Inhibitory Depression
    R_syn[0][0] = 1

    PSC = np.zeros((1, sim_steps))
    AP_neuron = np.zeros((1, sim_steps))

    for t in time:
        AP_syn = spikes[t - 1]
        
        # Synapse var - Inhibitory - Depression
        syn_u_aux = 1*u_syn[0][t - 1]
        syn_R_aux = 1*R_syn[0][t - 1]
        syn_I_aux = 1*I_syn[0][t - 1]
        syn_R_prev = 1*R_syn[0][t - 1]
            
        # Synapse - Inhibitory - Depression
        syn_du = synapse_utilization(u = syn_u_aux, tau_f = t_f, U = U, AP = AP_syn, dt = dt)
        u_syn[0][t] = syn_u_aux + syn_du
        
        syn_dR = synapse_recovery(R = syn_R_aux, tau_d = t_d, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt, R_prev=syn_R_prev)
        R_syn[0][t] = syn_R_aux + syn_dR
        
        syn_dI = synapse_current(I = syn_I_aux, tau_s = t_s, A = A, R_prev=syn_R_prev, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt)
        I_syn[0][t] = syn_I_aux + syn_dI
        PSC[0][t] = 1*I_syn[0][t]
        
        v_aux = 1*v[0][t - 1]
        u_aux = 1*u[0][t - 1]
        
        # Neuron - RS - Excitatory
        if (v_aux >= vp):
            AP_neuron[0][t] = t - 1
            v_aux = v[0][t]
            v[0][t] = c
            u[0][t] = u_aux + d
        else:
            dv = izhikevich_dvdt(v = v_aux, u = u_aux, I = W*PSC[0][t - 1])
            du = izhikevich_dudt(v = v_aux, u = u_aux, a = a, b = b)
     
            v[0][t] = v_aux + dt*dv
            u[0][t] = u_aux + dt*du
        
    v_value = []
    for ap in AP_neuron[0]:
        if (ap > 1):
            print(ap)
            v_value.append(v[0][int(ap)])
            
    fig, (ax1,ax2,ax3) = plt.subplots(3,1,figsize=(15, 15), constrained_layout=True, sharex=True)
    
    fig.suptitle(f'{neuron_type}', fontsize=30)
    ax1.plot(spikes)
    ax2.plot(PSC[0])
    ax3.plot(v[0])

    ax1.set_title('Spike train generated by Poisson', fontsize=20)
    ax2.set_title('PSC - Inibitory dominated by depression', fontsize=20)
    ax3.set_title('Potential', fontsize=20)
    plt.show()

def tm_syn_inib_fac(sim_steps, time, dt, a, b, c, d, vp, vr, spikes, W, neuron_type):
    t_f = 376
    t_d = 45
    U = 0.5
    A = 1
    t_s = 11
    
    v = np.zeros((1, sim_steps))
    v[0][0] = vr
    u = np.zeros((1, sim_steps))
    u[0][0] = vr*b

    R_syn = np.zeros((1, sim_steps)) # R for Inhibitory Facilitation
    u_syn = np.zeros((1, sim_steps)) # u for Inhibitory Facilitation
    I_syn = np.zeros((1, sim_steps)) # I for Inhibitory Facilitation
    R_syn[0][0] = 1

    PSC = np.zeros((1, sim_steps))
    AP_neuron = np.zeros((1, sim_steps))

    for t in time:
        AP_syn = spikes[t - 1]
        
        # Synapse var - Inhibitory - Faciliation
        syn_u_aux = 1*u_syn[0][t - 1]
        syn_R_aux = 1*R_syn[0][t - 1]
        syn_I_aux = 1*I_syn[0][t - 1]   
        syn_R_prev = 1*R_syn[0][t - 1]
            
        # Synapse - Inhibitory - Facilitation
        syn_du = synapse_utilization(u = syn_u_aux, tau_f = t_f, U = U, AP=AP_syn, dt = dt)
        u_syn[0][t] = syn_u_aux + syn_du
        
        syn_dR = synapse_recovery(R = syn_R_aux, tau_d = t_d, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt, R_prev=syn_R_prev)
        R_syn[0][t] = syn_R_aux + syn_dR
        
        syn_dI = synapse_current(I = syn_I_aux, tau_s = t_s, A = A, R_prev=syn_R_prev, u_next = 1*u_syn[0][t], AP = AP_syn, dt = dt)
        I_syn[0][t] = syn_I_aux + syn_dI
        PSC[0][t] = 1*I_syn[0][t]
        
        v_aux = 1*v[0][t - 1]
        u_aux = 1*u[0][t - 1]
        
        # Neuron - RS - Excitatory
        if (v_aux >= vp):
            AP_neuron[0][t] = t - 1
            v_aux = 1*v[0][t]
            v[0][t] = c
            u[0][t] = u_aux + d
        else:
            dv = izhikevich_dvdt(v = v_aux, u = u_aux, I = W*PSC[0][t - 1])
            du = izhikevich_dudt(v = v_aux, u = u_aux, a = a, b = b)
        
            v[0][t] = v_aux + dt*dv
            u[0][t] = u_aux + dt*du
        
    v_value = []
    
    for ap in AP_neuron[0]:
        if (ap > 1):
            print(ap)
            v_value.append(v[0][int(ap)])

    fig, (ax1,ax2,ax3) = plt.subplots(3,1,figsize=(15, 15), constrained_layout=True, sharex=True)
    
    fig.suptitle(f'{neuron_type}', fontsize=30)
    ax1.plot(spikes)
    ax2.plot(PSC[0])
    ax3.plot(v[0])

    ax1.set_title('Spike train generated by Poisson', fontsize=20)
    ax2.set_title('PSC - Inibitory dominated by facilitation', fontsize=20)
    ax3.set_title('Potential', fontsize=20)
    plt.show()
